[{"D:\\hunny\\web development\\frontend-task\\src\\reportWebVitals.js":"1","D:\\hunny\\web development\\frontend-task\\src\\index.js":"2","D:\\hunny\\web development\\frontend-task\\src\\App.js":"3","D:\\hunny\\web development\\frontend-task\\src\\components\\WhiteBoard.jsx":"4"},{"size":375,"mtime":1674495377971,"results":"5","hashOfConfig":"6"},{"size":302,"mtime":1674742829624,"results":"7","hashOfConfig":"6"},{"size":259,"mtime":1674741385293,"results":"8","hashOfConfig":"6"},{"size":8129,"mtime":1674743167852,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"136whci",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"D:\\hunny\\web development\\frontend-task\\src\\reportWebVitals.js",[],"D:\\hunny\\web development\\frontend-task\\src\\index.js",[],"D:\\hunny\\web development\\frontend-task\\src\\App.js",["19"],"D:\\hunny\\web development\\frontend-task\\src\\components\\WhiteBoard.jsx",["20","21","22","23","24","25","26","27","28","29","30","31","32","33"],"import React from 'react'\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { fabric } from \"fabric\";\r\nimport { HiPencil } from \"react-icons/hi\";\r\nimport { AiFillCheckCircle } from \"react-icons/ai\";\r\nimport { BsFillEraserFill } from \"react-icons/bs\";\r\nimport { BsFillCircleFill } from \"react-icons/bs\";\r\nimport { BiRectangle } from \"react-icons/bi\";\r\nimport { BsCircle } from \"react-icons/bs\";\r\nimport \"./WhiteBoard.css\";\r\nfunction WhiteBoard() {\r\n  \r\n  const [brushColor, setBrushColor] = useState(\"#333333\");\r\n  const [brushWidth, setBrushWidth] = useState(3);\r\n  const [eraserWidth, setEraserWidth] = useState(3);\r\n  const [shape, setShape] = useState(\"line\");\r\n  const [startPoint, setStartPoint] = useState(null);\r\n  const canvasRef = useRef(null);\r\n  useEffect(() => {\r\n    const canvas = new fabric.Canvas(\"canvas\", {\r\n      isDrawingMode: true,\r\n    });\r\n    canvasRef.current = canvas;\r\n    canvas.setHeight(window.innerHeight);\r\n    canvas.setWidth(window.innerWidth);\r\n    canvas.freeDrawingBrush.width = 3;\r\n    canvas.freeDrawingBrush.color = brushColor;\r\n    canvasRef.current.freeDrawingBrush.color = brushColor;\r\n    canvasRef.current.renderAll();\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n      const canvas=canvasRef.current;\r\n      if(shape=='line')\r\n      {\r\n        setStartPoint(null);\r\n        canvasRef.current.isDrawingMode=true;\r\n      }\r\n      else\r\n      {\r\n        canvas.on('mouse:down', handleCanvasMouseDown);\r\n        canvas.on('mouse:move', handleCanvasMouseMove);\r\n        canvas.on('mouse:up', handleCanvasMouseUp);\r\n        canvas.on('selected', function (options) {\r\n          let rect = options.target;\r\n          let newWidth = rect.width * rect.scaleX;\r\n          let newHeight = rect.height * rect.scaleY; \r\n          rect.scaleToWidth(newWidth);\r\n          rect.scaleToHeight(newHeight);\r\n          canvas.renderAll();\r\n        });\r\n        canvasRef.current.isDrawingMode=false;\r\n      }\r\n    }, [shape, setShape, startPoint])\r\n    \r\n  \r\n    const handleColorChange = (color) => {\r\n      setBrushColor(color);\r\n      canvasRef.current.freeDrawingBrush.color = color;\r\n      canvasRef.current.freeDrawingBrush.width = brushWidth;\r\n      canvasRef.current.renderAll();\r\n    };\r\n  \r\n    const handleEraser = (color) => {\r\n      setBrushColor(color);\r\n      canvasRef.current.freeDrawingBrush.color = color;\r\n      canvasRef.current.freeDrawingBrush.width = eraserWidth;\r\n      canvasRef.current.renderAll();\r\n    };\r\n  \r\n    const handleBrushWidthChange = (event) => {\r\n      setBrushWidth(event.target.value);\r\n      canvasRef.current.freeDrawingBrush.width = event.target.value;\r\n      canvasRef.current.renderAll();\r\n    };\r\n  \r\n    const handleEraserWidthChange = (event) => {\r\n      setEraserWidth(event.target.value);\r\n      canvasRef.current.freeDrawingBrush.width = event.target.value;\r\n      canvasRef.current.freeDrawingBrush.color = \"white\";\r\n      canvasRef.current.renderAll();\r\n    };\r\n    \r\n    const handleShapeSelection = (shapeType) => {\r\n      // console.log(shape);\r\n      setShape(shapeType);\r\n    };\r\n    \r\n    const handleCanvasMouseDown = (options) => { \r\n      if(shape!='line')\r\n      {\r\n        setStartPoint(options.pointer);\r\n      }\r\n    };\r\n    \r\n    const handleCanvasMouseMove = (options) => {\r\n    };\r\n    \r\n    const handleCanvasMouseUp = (options) => {\r\n      if (shape == \"rect\" && startPoint) {\r\n        // console.log(\"handleCanvasMouseMove\"+\"__\"+startPoint.x+\" \"+startPoint.y);\r\n        let a=startPoint.x;\r\n        let b=startPoint.y;\r\n        // console.log(\"handleCanvasMouseUp \"+\"__\"+a+\" \"+b);\r\n        \r\n        const { x, y } = options.pointer;\r\n        // console.log(\"handleCanvasMouseMove_Inside\"+\"__\"+x+\" \"+y);\r\n        const h = y - b;\r\n        const w = x - a;\r\n        const newRect = new fabric.Rect({\r\n          left: a,\r\n          top: b,\r\n          height: h,  \r\n          width: w,\r\n          fill: (brushColor==\"#ffffff\"?\"#000000\":brushColor),\r\n          selectable: true\r\n        });\r\n        let active = canvasRef.current.getActiveObject()\r\n        if (active) {\r\n          canvasRef.current.remove(active);\r\n        }\r\n        canvasRef.current.add(newRect).setActiveObject(newRect);\r\n      }\r\n      else if (shape == \"circle\" && startPoint) {\r\n        const { x, y } = options.pointer;\r\n        const radius =  (Math.sqrt(Math.pow((x-startPoint.x),2) + Math.pow((y-startPoint.y),2)))/2;\r\n        const circle = new fabric.Circle({\r\n          left: startPoint.x,\r\n          top: startPoint.y,\r\n          radius: radius,\r\n          fill: (brushColor==\"#ffffff\"?\"#000000\":brushColor)\r\n        });\r\n        let active = canvasRef.current.getActiveObject()\r\n        if (active) {\r\n          canvasRef.current.remove(active);\r\n        }\r\n        canvasRef.current.add(circle).setActiveObject(circle);\r\n      }\r\n      else{\r\n        let active = canvasRef.current.getActiveObject()\r\n        if (active) {\r\n          canvasRef.current.remove(active);\r\n        }\r\n      }\r\n      setStartPoint(null);\r\n    };\r\n    \r\n    return (\r\n      <div>\r\n        <nav className=\"nav\">\r\n          <div className=\"nav-left\">\r\n            <button className=\"pencil-icon icon\" style={{backgroundColor:(brushColor==\"#ffffff\"?\"#000000\":brushColor)  }} onClick={() => handleShapeSelection(\"line\")}>\r\n              <HiPencil border-radius=\"15px\" font-size=\"20px\" color=\"white\"/>\r\n            </button>\r\n            <input\r\n              type=\"range\"\r\n              min=\"10\"\r\n              max=\"30\"\r\n              className=\"slider\"\r\n              value={brushWidth}\r\n              onChange={handleBrushWidthChange}\r\n            />\r\n            {brushColor==\"#333333\" ? (\r\n                  <AiFillCheckCircle color=\"#333333\" size=\"30px\" onClick={() => handleColorChange(\"#333333\")} />\r\n                  ) : (\r\n                  <BsFillCircleFill color=\"#333333\" size=\"22px\" onClick={() => handleColorChange(\"#333333\")} />\r\n            )}\r\n            {brushColor==\"#219653\" ? (\r\n                  <AiFillCheckCircle color=\"#219653\" size=\"30px\" onClick={() => handleColorChange(\"#219653\")} />\r\n                  ) : (\r\n                  <BsFillCircleFill color=\"#219653\" size=\"22px\" onClick={() => handleColorChange(\"#219653\")} />\r\n            )}\r\n            {brushColor==\"#f2c94c\" ? (\r\n                  <AiFillCheckCircle color=\"#f2c94c\" size=\"30px\" onClick={() => handleColorChange(\"#f2c94c\")} />\r\n                  ) : (\r\n                  <BsFillCircleFill color=\"#f2c94c\" size=\"22px\" onClick={() => handleColorChange(\"#f2c94c\")} />\r\n            )}\r\n            {brushColor==\"#2f80ed\" ? (\r\n                  <AiFillCheckCircle color=\"#2f80ed\" size=\"30px\" onClick={() => handleColorChange(\"#2f80ed\")} />\r\n                  ) : (\r\n                  <BsFillCircleFill color=\"#2f80ed\" size=\"22px\" onClick={() => handleColorChange(\"#2f80ed\")} />\r\n            )}\r\n            {brushColor==\"#da0610\" ? (\r\n                  <AiFillCheckCircle className='round-button' color=\"#da0610\" size=\"30px\" onClick={() => handleColorChange(\"#da0610\")} />\r\n                  ) : (\r\n                  <BsFillCircleFill className='round-button' color=\"#da0610\" size=\"22px\" onClick={() => handleColorChange(\"#da0610\")} />\r\n            )}\r\n            <button className=\"pencil-icon icon\" onClick={() => handleShapeSelection(\"rect\")}>\r\n              <BiRectangle/>\r\n            </button>\r\n            <button className=\"pencil-icon icon\" onClick={() => handleShapeSelection(\"circle\")}>\r\n              <BsCircle/>\r\n            </button>\r\n          </div>\r\n          <div className=\"nav-right\">\r\n            <button className=\"pencil-icon icon\" onClick={() =>{\r\n              handleShapeSelection(\"line\");\r\n              handleEraser(\"#ffffff\")}\r\n            }>\r\n              <BsFillEraserFill/>\r\n            </button>\r\n            <input\r\n            type=\"range\"\r\n            min=\"10\"\r\n            max=\"30\"\r\n            className=\"slider\"\r\n            value={eraserWidth}\r\n            onChange={handleEraserWidthChange}\r\n            />\r\n          </div>\r\n        </nav>\r\n      <canvas id=\"canvas\" ref={canvasRef} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WhiteBoard",{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":30,"column":6,"nodeType":"40","endLine":30,"endColumn":8,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":34,"column":15,"nodeType":"44","messageId":"45","endLine":34,"endColumn":17},{"ruleId":"38","severity":1,"message":"46","line":54,"column":8,"nodeType":"40","endLine":54,"endColumn":37,"suggestions":"47"},{"ruleId":"42","severity":1,"message":"48","line":90,"column":15,"nodeType":"44","messageId":"45","endLine":90,"endColumn":17},{"ruleId":"42","severity":1,"message":"43","line":100,"column":17,"nodeType":"44","messageId":"45","endLine":100,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":115,"column":28,"nodeType":"44","messageId":"45","endLine":115,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":124,"column":22,"nodeType":"44","messageId":"45","endLine":124,"endColumn":24},{"ruleId":"42","severity":1,"message":"43","line":131,"column":28,"nodeType":"44","messageId":"45","endLine":131,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":152,"column":85,"nodeType":"44","messageId":"45","endLine":152,"endColumn":87},{"ruleId":"42","severity":1,"message":"43","line":163,"column":24,"nodeType":"44","messageId":"45","endLine":163,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":168,"column":24,"nodeType":"44","messageId":"45","endLine":168,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":173,"column":24,"nodeType":"44","messageId":"45","endLine":173,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":178,"column":24,"nodeType":"44","messageId":"45","endLine":178,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":183,"column":24,"nodeType":"44","messageId":"45","endLine":183,"endColumn":26},"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'brushColor'. Either include it or remove the dependency array.","ArrayExpression",["49"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'handleCanvasMouseDown' and 'handleCanvasMouseUp'. Either include them or remove the dependency array.",["50"],"Expected '!==' and instead saw '!='.",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [brushColor]",{"range":"55","text":"56"},"Update the dependencies array to be: [shape, setShape, startPoint, handleCanvasMouseDown, handleCanvasMouseUp]",{"range":"57","text":"58"},[1182,1184],"[brushColor]",[1947,1976],"[shape, setShape, startPoint, handleCanvasMouseDown, handleCanvasMouseUp]"]